<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int 	N = 3;
typedef int[0,N-1] int_id;
typedef int[0,N] int_p;

const int switchTime = 1;

chan		    release[N], ready[N], stop;
urgent chan 	run[N];

chan priority ready &lt; default &lt; release;

clock 		time;

typedef struct{
int_id    id;
int_p     P;
int       T;
int       C;
} task;
</declaration>
	<template>
		<name x="43" y="17">Task</name>
		<parameter>const task properties</parameter>
		<declaration>clock c, t;

bool blocked = 0;

const int_id id = properties.id;
const int_p P = properties.P;
const int T = properties.T;
const int C = properties.C;</declaration>
		<location id="id0" x="-467" y="-314">
			<name x="-475" y="-373">Idle</name>
			<label kind="invariant" x="-484" y="-348">t&lt;=T</label>
		</location>
		<location id="id1" x="-467" y="-110" color="#ffa500">
			<name x="-450" y="-136">Ready</name>
			<label kind="invariant" x="-612" y="-119">c'==0 &amp;&amp; t &lt;= T</label>
		</location>
		<location id="id2" x="-467" y="59" color="#00ff00">
			<name x="-450" y="33">Running</name>
			<label kind="invariant" x="-527" y="85">c&lt;=C &amp;&amp; t &lt;= T + 1</label>
		</location>
		<location id="id3" x="-186" y="59">
			<name x="-170" y="25">Error</name>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-305" y="-51">blocked</label>
			<label kind="synchronisation" x="-305" y="-34">run[id]?</label>
			<label kind="assignment" x="-305" y="-17">blocked = false</label>
			<nail x="-314" y="-51"/>
			<nail x="-314" y="8"/>
			<nail x="-450" y="17"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-577" y="-51">!blocked</label>
			<label kind="synchronisation" x="-577" y="-34">stop?</label>
			<label kind="assignment" x="-620" y="-17">blocked = true</label>
			<nail x="-509" y="-17"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-458" y="-255">t==T</label>
			<label kind="synchronisation" x="-458" y="-229">ready[id]!</label>
			<label kind="assignment" x="-458" y="-212">t=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-458" y="-68">!blocked</label>
			<label kind="synchronisation" x="-458" y="-51">run[id]?</label>
			<label kind="assignment" x="-458" y="-34">c=0,
blocked = false</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-816" y="-110">c==C &amp;&amp; t &lt;= T</label>
			<label kind="synchronisation" x="-772" y="-136">release[id]!</label>
			<nail x="-688" y="59"/>
			<nail x="-688" y="-314"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-297" y="-136">t == T</label>
			<nail x="-186" y="-110"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-306" y="34">t &gt; T</label>
		</transition>
	</template>
	<template>
		<name x="40" y="16">SchedulerTemplate</name>
		<parameter>const task tasks[N]</parameter>
		<declaration>const task sta[N] = tasks;
task list[N] =tasks;
int[0,N] len = N;
clock t;

task empty = { 0,0,0,0 };

int_id running = 0;

int switchLen = 1;

int getSwitch()
{
    return switchTime * switchLen;
}

void incSwichLen()
{
    switchLen++;
}

void resetSwitch()
{
    switchLen = 1;
}

task idToTask(int_id id) {
    int i;
    for(i = 0; i &lt; N; i++)
    {
        if(sta[i].id == id)
            return sta[i];
    }
    return empty;
}


void enqueue(task element)
{
task tmp=empty;
list[len++] = element;
if (len&gt;0)
{
	int i=len-1;
	while (i&gt;0 &amp;&amp; list[i].P &gt; list[i-1].P)
	{
		tmp = list[i-1];
		list[i-1] = list[i];
		list[i] = tmp;
		i--;
	}		
}
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = empty;
}

// Returns the front element of the queue
task front()
{
   return list[0];
}

// Returns the last element of the queue
task tail()
{
   return list[len - 1];
}</declaration>
		<location id="id4" x="187" y="221">
		</location>
		<location id="id5" x="-280" y="221">
			<name x="-272" y="178">SwitchingFree</name>
			<label kind="invariant" x="-272" y="195">t &lt;= getSwitch()</label>
		</location>
		<location id="id6" x="187" y="671">
			<name x="127" y="714">SwitchingRunning</name>
			<label kind="invariant" x="127" y="731">t &lt;= getSwitch()</label>
		</location>
		<location id="id7" x="331" y="450">
			<committed/>
		</location>
		<location id="id8" x="59" y="450">
			<committed/>
		</location>
		<location id="id9" x="187" y="323">
			<name x="204" y="297">Occ</name>
		</location>
		<location id="id10" x="192" y="128">
			<name x="255" y="93">Free</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="select" x="332" y="637">e : int_id</label>
			<label kind="guard" x="272" y="654">idToTask(e).P &lt;= front().P</label>
			<label kind="synchronisation" x="332" y="671">ready[e]?</label>
			<label kind="assignment" x="289" y="688">enqueue(idToTask(e))</label>
			<nail x="264" y="612"/>
			<nail x="263" y="722"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="select" x="-477" y="52">e : int_id</label>
			<label kind="guard" x="-477" y="69">idToTask(e).P &lt;= front().P</label>
			<label kind="synchronisation" x="-477" y="86">ready[e]?</label>
			<label kind="assignment" x="-476" y="102">enqueue(idToTask(e))</label>
			<nail x="-289" y="127"/>
			<nail x="-382" y="212"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="204" y="246">run[front().id]!</label>
			<label kind="assignment" x="204" y="263">running = front().id</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="34" y="161">t == getSwitch()</label>
			<label kind="assignment" x="34" y="178">resetSwitch()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="select" x="-501" y="263">e : int_id</label>
			<label kind="guard" x="-501" y="280">idToTask(e).P &gt; front().P</label>
			<label kind="synchronisation" x="-501" y="297">ready[e]?</label>
			<label kind="assignment" x="-501" y="314">enqueue(idToTask(e))</label>
			<nail x="-289" y="323"/>
			<nail x="-382" y="229"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id5"/>
			<label kind="select" x="-178" y="238">e : int_id</label>
			<label kind="guard" x="-178" y="255">e == front().id &amp;&amp; len - 1 &gt; 0</label>
			<label kind="synchronisation" x="-178" y="272">release[e]?</label>
			<label kind="assignment" x="-178" y="289">dequeue(), t = 0</label>
			<nail x="-280" y="323"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id5"/>
			<label kind="select" x="-238" y="33">e : int_id</label>
			<label kind="synchronisation" x="-238" y="59">ready[e]?</label>
			<label kind="assignment" x="-238" y="76">enqueue(idToTask(e)), t = 0</label>
			<nail x="-280" y="127"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="select" x="51" y="637">e : int_id</label>
			<label kind="guard" x="-59" y="654">idToTask(e).P &gt; front().P</label>
			<label kind="synchronisation" x="51" y="671">ready[e]?</label>
			<label kind="assignment" x="-42" y="697">enqueue(idToTask(e)),
incSwichLen()</label>
			<nail x="119" y="603"/>
			<nail x="119" y="722"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="280" y="535">t == getSwitch()</label>
			<label kind="assignment" x="255" y="561">resetSwitch()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="guard" x="-51" y="518">running != front().id</label>
			<label kind="synchronisation" x="-43" y="535">stop!</label>
			<label kind="assignment" x="-43" y="552">t = 0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="272" y="365">run[front().id]!</label>
			<label kind="assignment" x="280" y="382">running = front().id</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="119" y="416">running == front().id</label>
			<label kind="synchronisation" x="178" y="425">stop!</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="select" x="51" y="340">e : int_id</label>
			<label kind="synchronisation" x="51" y="357">ready[e]?</label>
			<label kind="assignment" x="-42" y="374">enqueue(idToTask(e))</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="select" x="425" y="170">e : int_id</label>
			<label kind="guard" x="425" y="186">e == front().id &amp;&amp; len  - 1 == 0</label>
			<label kind="synchronisation" x="425" y="202">release[e]?</label>
			<label kind="assignment" x="425" y="218">dequeue()</label>
			<nail x="408" y="323"/>
			<nail x="408" y="127"/>
		</transition>
	</template>
	<system>const task t2 = {2, 2, 20, 1};
ShootingTask = Task(t2);
const task t1 = {1, 1, 20, 3};
WeaponSystemTask = Task(t1);
const task t0 = {0, 3, 10, 5};
KalmanTask = Task(t0);
const task tasks[N] = {t0, t2, t1};

Scheduler = SchedulerTemplate(tasks);

system 
       KalmanTask, WeaponSystemTask, ShootingTask, Scheduler;

gantt {
    KalmanTask :   KalmanTask.Idle -&gt; 2,  KalmanTask.Ready -&gt; 6, KalmanTask.Running -&gt; 1, KalmanTask.Ready &amp;&amp; KalmanTask.blocked -&gt;3, KalmanTask.Error-&gt;0; 
    WeaponSystemTask :   WeaponSystemTask.Idle -&gt; 2,  WeaponSystemTask.Ready -&gt; 6, WeaponSystemTask.Running -&gt; 1, WeaponSystemTask.Ready &amp;&amp; WeaponSystemTask.blocked -&gt;3, WeaponSystemTask.Error-&gt;0; 
    ShootingTask :   ShootingTask.Idle -&gt; 2,  ShootingTask.Ready -&gt; 6, ShootingTask.Running -&gt; 1, ShootingTask.Ready &amp;&amp; ShootingTask.blocked -&gt;3, ShootingTask.Error-&gt;0;
    Scheduler     :   Scheduler.Free -&gt; 2, Scheduler.Occ -&gt; 1, Scheduler.SwitchingRunning || Scheduler.SwitchingFree -&gt; 3;
}
</system>
	<queries>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] !ShootingTask.Error &amp;&amp; !WeaponSystemTask.Error &amp;&amp; !KalmanTask.Error
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
